{
    /*
    	// Place your snippets for PowerShell here. Each snippet is defined under a snippet name and has a prefix, body and
    	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    	// same ids are connected.
    	// Example:
    	"Print to console": {
    		"prefix": "log",
    		"body": [
    			"console.log('$1');",
    			"$2"
    		],
    		"description": "Log output to console"
    	}
    */
    "GUI - WPF + XAML": {
        "prefix": "GUI - WPF + XAML",
        "body": [
            "$inputXML = @\"",
            "<Window x:Class=\"WpfApplication2.MainWindow\"",
            ".",
            ".",
            ".",
            "</Window>",
            "\"@",
            "",
            "$inputXML = $inputXML -replace 'mc:Ignorable=\"d\"', '' -replace \"x:N\", 'N' -replace '^<Win.*', '<Window'",
            "[void][System.Reflection.Assembly]::LoadWithPartialName( 'presentationframework' )",
            "[xml]$XAML = $inputXML",
            "",
            "#Check for a text changed value (which we cannot parse)",
            "If ( $xaml.SelectNodes(\"//*[@Name]\" ) | ? TextChanged) {",
            "    write-error \"This Snippet can't convert any lines which contain a 'textChanged' property. `n please manually remove these entries\"",
            "    $xaml.SelectNodes( \"//*[@Name]\" ) | ? TextChanged | % { Write-Warning \"Please remove the TextChanged property from this entry $( $_.Name )\" }",
            "    return",
            "}",
            "",
            "#Read XAML",
            "",
            "$reader = ( New-Object System.Xml.XmlNodeReader $xaml )",
            "try {",
            "    $Form = [Windows.Markup.XamlReader]::Load( $reader )",
            "} catch [System.Management.Automation.MethodInvocationException] {",
            "    Write-Warning \"We ran into a problem with the XAML code.  Check the syntax for this control...\"",
            "    Write-Host $error[0].Exception.Message -ForegroundColor Red",
            "    if ($error[0].Exception.Message -like \"*button*\") {",
            "        Write-Warning \"Ensure your <button in the `$inputXML does NOT have a Click=ButtonClick property. PS can't handle this`n\"",
            "    }",
            "} catch {",
            "    #if it broke some other way :D",
            "    Write-Host \"Unable to load Windows.Markup.XamlReader. Double-check syntax and ensure .net is installed.\"",
            "}",
            "",
            "#===========================================================================",
            "# Store Form Objects In PowerShell",
            "#===========================================================================",
            "",
            "$XAML.SelectNodes( \"//*[@Name]\" ) | % { Set-Variable -Name \"WPF$($_.Name)\" -Value $Form.FindName( $_.Name ) }",
            "",
            "function Get-FormVariables {",
            "    if ( $global:ReadmeDisplay -ne $true ) {",
            "        Write-host \"If you need to reference this display again, run Get-FormVariables\" -ForegroundColor Yellow; $global:ReadmeDisplay = $true",
            "    }",
            "    Write-Host \"Found the following interactable elements from our form\" -ForegroundColor Cyan",
            "    Get-Variable WPF*",
            "}",
            "",
            "Get-FormVariables",
            "",
            "#===========================================================================",
            "# Use this place to add code to the various form elements in your GUI",
            "#===========================================================================",
            "<#>",
            "Adding items to a dropdown/combo box",
            "$vmpicklistView.items.Add(",
            "    [pscustomobject]@{ 'VMName' = ($_).Name ; Status = $_.Status ; Other = \"Yes\" }",
            ")",
            "",
            "Setting the text of a text box to the current PC name",
            "$WPFtextBox.Text = $env:COMPUTERNAME",
            "",
            "Adding code to a button, so that when clicked, it pings a system",
            "$WPFbutton.Add_Click(",
            "    { Test-connection -count 1 -ComputerName $WPFtextBox.Text }",
            ")",
            "<#>",
            "",
            "# To shows the window",
            "",
            "Write-Host \"To show the window, run the following\" -ForegroundColor Cyan",
            "$Form.ShowDialog() | Out-Null"
        ],
        "description": "Create your GUI in minutes in Visual Studio then paste it into $inputXML"
    }
}
